#!/usr/bin/env python3

from argparse import ArgumentParser
from logging import basicConfig, getLogger, INFO
from os import getenv
from sys import exit

from copr.v3 import Client

basicConfig(
    level=getenv('COPR_BUILD_LOG', INFO)
)
logger = getLogger("copr-build")

def main():
    arg_parser = ArgumentParser()
    arg_parser.add_argument(
        "--project-name",
        required=True,
        help="COPR Project Name",
    )
    arg_parser.add_argument(
        "--package-name",
        required=True,
        help="COPR Package Name",
    )
    arg_parser.add_argument(
        "--owner",
        required=True,
        help="COPR Project Owner",
    )
    arg_parser.add_argument(
        "--git-remote",
        required=True,
        help="Source Control Remote"
    )
    arg_parser.add_argument(
        "--committish",
        default="main",
        help="Git Committish to build in COPR",
    )

    cli_args = arg_parser.parse_args()
    logger.info(f"copr-build: {cli_args}")

    copr_client = Client.create_from_config_file()
    try:
        copr_package = copr_client.package_proxy.get(
            cli_args.owner,
            cli_args.project_name,
            cli_args.package_name,
        )
    except:
        try:
            logger.warn("package not found, creating package")
            copr_package = copr_client.package_proxy.add(
                cli_args.owner,
                cli_args.project_name,
                cli_args.package_name,
                "scm",
                {
                    "clone_url": cli_args.git_remote,
                    "scm_type": "git",
                    "comittish": cli_args.committish,
                }
            )
            logger.info(f"created package {copr_package}")
        except:
            log.error("could not create package")
            exit(1)


    try:
        copr_client.package_proxy.build(
            cli_args.owner,
            cli_args.project_name,
            cli_args.package_name,
        )
        logger.info(f"triggered copr build for {cli_args.owner}/{cli_args.project_name}/{cli_args.package_name}")
    except Exception as e:
        logger.error("could not trigger build")
        logger.error(e)



if __name__ == "__main__":
    main()
